:py:mod:`pyx2cscope.variable.variable`
======================================

.. py:module:: pyx2cscope.variable.variable

.. autoapi-nested-parse::

   This module contains the Variable class and its subclasses.

   The Variable class represents a variable in the MCU data memory. It provides methods for retrieving and setting the value of the variable, as well as handling arrays of variables.

   Subclasses of the Variable class define specific types of variables, such as integers or floating-point numbers, and implement the necessary methods for converting between the byte representation of the variable and its actual value.

   Classes:
       - Variable: Represents a variable in the MCU data memory.
       - VariableInt8: Represents an 8-bit signed integer variable.
       - VariableUint8: Represents an 8-bit unsigned integer variable.
       - VariableInt16: Represents a 16-bit signed integer variable.
       - VariableUint16: Represents a 16-bit unsigned integer variable.
       - VariableInt32: Represents a 32-bit signed integer variable.
       - VariableUint32: Represents a 32-bit unsigned integer variable.
       - VariableInt64: Represents a 64-bit signed integer variable.
       - VariableUint64: Represents a 64-bit unsigned integer variable.
       - VariableFloat: Represents a floating-point number variable.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyx2cscope.variable.variable.Variable
   pyx2cscope.variable.variable.VariableInt8
   pyx2cscope.variable.variable.VariableUint8
   pyx2cscope.variable.variable.VariableInt16
   pyx2cscope.variable.variable.VariableUint16
   pyx2cscope.variable.variable.VariableInt32
   pyx2cscope.variable.variable.VariableUint32
   pyx2cscope.variable.variable.VariableUint64
   pyx2cscope.variable.variable.VariableInt64
   pyx2cscope.variable.variable.VariableFloat




.. py:class:: Variable(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Represents a variable in the MCU data memory.

   .. py:method:: __getitem__(item)

      Retrieve value regarding an indexed address from the variable's base address.

      Subclasses will handle the conversion to the real value.

      Args:
          item (int): The variable index (in case of an array). Default to zero.

      Raises:
          IndexError: If the index is outside the variable scope.

      Returns:
          the value of the variable's index position.


   .. py:method:: __setitem__(key, value)

      Set the value regarding an indexed address from the variable's base address.

      Args:
          key (int): the index of the variable.
          value (Number): The value to be stored in the MCU.


   .. py:method:: __len__()

      Get the number of elements on this variable.

      In case the variable is an array, we will get the array size.
      In case of a single object, we will get the value 0.


   .. py:method:: _get_array_values()


   .. py:method:: get_value()

      Get the stored value from the MCU.

      Returns:
          Number: The stored value from the MCU.


   .. py:method:: _check_value_range(value: numbers.Number)

      Check if the given value is in range of min and max variable values.

      Args:
          value: the variable value

      Raises:
          ValueError: if value is outside min-max range.


   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]
      :abstractmethod:

      Return a tuple with allowed [min, max] values.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number
      :abstractmethod:

      Convert the byte array to the respective variable number value.

      Returns:
          Number: the variable value as a number


   .. py:method:: bytes_to_array(data: bytearray) -> List[numbers.Number]

      Convert the bytearray (variable is an array) to a list of the respective variable number values.


   .. py:method:: set_value(new_value: numbers.Number)
      :abstractmethod:

      Set the value to be stored in the MCU.

      Args:
          new_value (Number): The value to be stored in the MCU.


   .. py:method:: get_width() -> int
      :abstractmethod:

      Get the width of the variable.

      Returns:
          int: Width of the variable.


   .. py:method:: is_array()

      Check if the variable is an array in the MCU.

      Returns:
          bool: True if the variable is an array, False otherwise.


   .. py:method:: _get_value_raw(index=0) -> bytearray

      Ask LNet and get the raw "bytearray" value from the hardware.

      Subclasses will handle the conversion to the real value.

      Args:
          index (int): The variable index (in case of an array). Default to zero.

      Raises:
          ValueError: If the returned data length is not the expected length.

      Returns:
          bytearray: Raw data returned from LNet, must be reconstructed to the right value.


   .. py:method:: _set_value_raw(bytes_data: bytes, index: int = 0) -> None

      Set the value of a variable in the microcontroller's RAM using raw bytes.

      This method sends the raw byte data to the specified memory address in the microcontroller's RAM.
      It handles the low-level communication with the microcontroller using the LNet interface.

      Args:
          bytes_data (bytes): The raw byte data to be written to the variable's memory location.
          index (int): The variable index (in case of an array). Default to zero.

      Raises:
          Exception: If there is an error in writing the data to the microcontroller's RAM.


   .. py:method:: is_signed() -> bool
      :abstractmethod:

      Abstract method to determine if the variable's data type is signed.

      Implementations of this method should return True if the variable's data type
      is a signed type (like signed integers), otherwise False.

      Returns:
          bool: True if the variable is of a signed data type, False otherwise.


   .. py:method:: is_integer() -> bool
      :abstractmethod:

      Abstract method to determine if the variable's data type is an integer.

      Implementations of this method should return True if the variable's data type
      is an integer (signed or unsigned), otherwise False for non-integer data types.

      Returns:
          bool: True if the variable is of an integer data type, False otherwise.



.. py:class:: VariableInt8(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents an 8-bit signed integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: INT8 is an integer type.


   .. py:method:: is_signed() -> bool

      Override: INT8 is a signed type.


   .. py:method:: get_width() -> int

      Override: INT8 width is 1 Byte wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableUint8(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents an 8-bit unsigned integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: UINT8 is an integer type.


   .. py:method:: is_signed() -> bool

      Override: UINT8 is not a signed type.


   .. py:method:: get_width() -> int

      Override: UINT8 width is 1 Byte wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableInt16(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 16-bit signed integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: INT16_T is an integer type.


   .. py:method:: is_signed() -> bool

      Override: INT16_T is a signed type.


   .. py:method:: get_width() -> int

      Override: INT16_T width is 2 Bytes wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableUint16(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 16-bit unsigned integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: UINT16_T is an integer type.


   .. py:method:: is_signed() -> bool

      Override: UINT16_T is not a signed type.


   .. py:method:: get_width() -> int

      Override: UINT16_T width is 2 Bytes wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableInt32(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 32-bit signed integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: INT32_T is an integer type.


   .. py:method:: is_signed() -> bool

      Override: INT32_T is a signed type.


   .. py:method:: get_width() -> int

      Override: INT32_T width is 4 Bytes wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableUint32(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 32-bit unsigned integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: UINT32_T is an integer type.


   .. py:method:: is_signed() -> bool

      Override: UINT32_T is not a signed type.


   .. py:method:: get_width() -> int

      Override: UINT32_T width is 4 Bytes wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableUint64(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 64-bit unsigned integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: UINT64 is an integer type.


   .. py:method:: is_signed() -> bool

      Override: UINT64 is not a signed type.


   .. py:method:: get_width() -> int

      Override: UINT64 width is 8 Bytes wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableInt64(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 64-bit signed integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: INT64 is an integer type.


   .. py:method:: is_signed() -> bool

      Override: INT64 is a signed type.


   .. py:method:: get_width() -> int

      Override: INT64 width is 8 Bytes wide.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Override: Convert the byte representation to decimal number value.



.. py:class:: VariableFloat(l_net: mchplnet.lnet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a floating-point number variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Return a tuple with allowed [min, max] values.


   .. py:method:: is_integer() -> bool

      Override: FLOAT is not an integer type.


   .. py:method:: is_signed() -> bool

      Override: FLOAT is a signed type.


   .. py:method:: get_width() -> int

      Override: FLOAT width is 4 Bytes wide.


   .. py:method:: set_value(value: float)

      Set the value of the variable in the MCU memory.

      Converts the float number to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte representation to decimal number value.




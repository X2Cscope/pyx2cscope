:py:mod:`pyx2cscope.xc2scope`
=============================

.. py:module:: pyx2cscope.xc2scope

.. autoapi-nested-parse::

   X2CScope module for interfacing with the X2C firmware enabled embedded systems.

   The pyx2cscope Python package communicates with X2Cscope enabled firmwares running on Microchip microcontrollers.
   It is utilising LNET protocol to communicate with the firmware. LNET protocoll is implemented in the mchplnet package.
   The package provides an interface to connect to the firmware, set up scope channels, request data, and process received data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyx2cscope.xc2scope.TriggerConfig
   pyx2cscope.xc2scope.X2CScope



Functions
~~~~~~~~~

.. autoapisummary::

   pyx2cscope.xc2scope.get_variable_as_scope_channel



.. py:function:: get_variable_as_scope_channel(variable: pyx2cscope.variable.variable.Variable) -> mchplnet.services.scope.ScopeChannel

   Converts a Variable object to a ScopeChannel object.

   Args:
       variable (Variable): The variable to be converted to a ScopeChannel.

   Returns:
       ScopeChannel: A ScopeChannel object representing the given variable.


.. py:class:: TriggerConfig


   Configuration class for scope trigger settings.

   Attributes:
       variable (Variable): The variable to use as the trigger source.
       trigger_level (int): The trigger level value for specified channel.
       trigger_mode (int): 0 Auto, 1 Triggered (default) .
       trigger_delay (int): The trigger delay (in percentage to the scope size) (default 0).
       trigger_edge (int): Rising 0, falling 1.

   .. py:attribute:: variable
      :type: pyx2cscope.variable.variable.Variable

      

   .. py:attribute:: trigger_level
      :type: int
      :value: 0

      

   .. py:attribute:: trigger_mode
      :type: int
      :value: 1

      

   .. py:attribute:: trigger_delay
      :type: int
      :value: 0

      

   .. py:attribute:: trigger_edge
      :type: int
      :value: 0

      


.. py:class:: X2CScope(elf_file: str, interface: mchplnet.interfaces.abstract_interface.InterfaceABC = None, *args, **kwargs)


   X2CScope class for interfacing with the X2C Scope tool.

   This class provides methods for connecting to the scope, setting up scope channels,
   requesting data, and processing received data.

   Attributes:
       elf_file (str): Path to the ELF file.
       interface (InterfaceABC): Interface object for communication.
       lnet (LNet): LNet object for low-level network operations.
       variable_factory (VariableFactory): Factory to create Variable objects.
       scope_setup: Configuration for the scope setup.
       convert_list (dict): Dictionary to store variable conversion functions.

   .. py:method:: set_interface(interface: mchplnet.interfaces.abstract_interface.InterfaceABC)

      Set the communication interface for the scope.

      Args:
          interface (InterfaceABC): The interface to be set for communication.


   .. py:method:: set_elf_file(elf_file: str)

      Set the ELF file for the scope.

      Args:
          elf_file (str): Path to the ELF file.


   .. py:method:: connect()

      Establish a connection with the scope interface.


   .. py:method:: disconnect()

      Terminate the connection with the scope interface.


   .. py:method:: list_variables() -> List[str]

      List all available variables.

      Returns:
          List[str]: A list of available variable names.


   .. py:method:: get_variable(name: str) -> pyx2cscope.variable.variable.Variable

      Retrieve a variable by its name.

      Args:
          name (str): The name of the variable to retrieve.

      Returns:
          Variable: The requested variable object.


   .. py:method:: add_scope_channel(variable: pyx2cscope.variable.variable.Variable, trigger: bool = False) -> int

      Add a variable as a scope channel.

      Args:
          variable (Variable): The variable to be added as a scope channel.
          trigger (bool, optional): If set to True, the channel will be used as a trigger. Defaults to False.

      Returns:
          int: The ID of the added scope channel.


   .. py:method:: remove_scope_channel(variable: pyx2cscope.variable.variable.Variable)

      Remove a variable from the scope channel.

      Args:
          variable (Variable): The variable to be removed from the scope channel.

      Returns:
          The result of the channel removal operation.


   .. py:method:: get_scope_channel_list() -> Dict[str, mchplnet.services.scope.ScopeChannel]

      Get a list of all scope channels.

      Returns:
          Dict[str, ScopeChannel]: A dictionary of scope channels with their names as keys.


   .. py:method:: set_scope_trigger(config: TriggerConfig)

      Set the scope trigger configuration.

      Args:
          config (TriggerConfig): Configuration object for trigger settings.


   .. py:method:: clear_trigger()

      Reset the trigger configuration.


   .. py:method:: set_sample_time(sample_time: int)

      Define a pre-scaler for sampling mode.

      This can be used to extend total sampling time at the cost of resolution.
      0 = every sample, 1 = every 2nd sample, 2 = every 3rd sample .....

      Args:
          sample_time (int): The sample time factor.


   .. py:method:: set_scope_state(scope_state: int)

      Set the state of the scope.

      Args:
          scope_state (int): The desired scope state.


   .. py:method:: request_scope_data()

      Request scope data from the LNet layer.

      This function should be called once all the required settings are made for data acquisition.


   .. py:method:: is_scope_data_ready() -> bool

      Check if the scope data is ready.

      Returns:
          bool: True if the scope data is ready, False otherwise.


   .. py:method:: get_trigger_position() -> int

      Get the position of the trigger event.

      Returns:
          int: The index position of the trigger event.


   .. py:method:: get_delay_trigger_position() -> int

      Get the position of the delay trigger.

      Returns:
          int: The index position of the delay trigger.


   .. py:method:: _calc_sda_used_length() -> int

      Calculate the used length of the Scope Data Array (SDA).

      Returns:
          int: The length of the used portion of the SDA.


   .. py:method:: _read_array_chunks() -> List[bytearray]

      Read array chunks from the LNet layer.

      Returns:
          List[bytearray]: A list containing the chunk data.


   .. py:method:: read_array(address: int, data_type: int) -> List[bytearray]

      Read an array from the specified address in the MCU memory.

      Args:
          address (int): The address to read from.
          data_type (int): The type of data to read.

      Returns:
          List[bytearray]: The read data.


   .. py:method:: _sort_channel_data(data: bytearray) -> Dict[str, List[numbers.Number]]

      Sort and convert the dataset byte order into channel byte order.

      Args:
          data (bytearray): The raw data read from the scope.

      Returns:
          Dict[str, List[Number]]: A dictionary with channel names as keys and lists of sorted data as values.


   .. py:method:: _filter_channels(channels: Dict[str, List[numbers.Number]]) -> Dict[str, List[numbers.Number]]

      Filter the channels to include only valid data.

      Args:
          channels (Dict[str, List[Number]]): The dictionary of channels with raw data.

      Returns:
          Dict[str, List[Number]]: The filtered dictionary of channels with valid data only.


   .. py:method:: get_scope_channel_data(valid_data: bool = False) -> Dict[str, List[numbers.Number]]

      Get the sorted and optionally filtered scope channel data.

      Args:
          valid_data (bool, optional): If True, return only valid data. Defaults to True.

      Returns:
          Dict[str, List[Number]]: A dictionary with channel names as keys and data lists as values.




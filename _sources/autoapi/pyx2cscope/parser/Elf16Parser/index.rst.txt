:py:mod:`pyx2cscope.parser.Elf16Parser`
=======================================

.. py:module:: pyx2cscope.parser.Elf16Parser


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyx2cscope.parser.Elf16Parser.Elf16Parser




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyx2cscope.parser.Elf16Parser.elf_file


.. py:class:: Elf16Parser(elf_path)


   Bases: :py:obj:`pyx2cscope.parser.Elf_Parser.ElfParser`

   Class for parsing ELF files generated by Microchip's XC16 compiler.

   This class extends the basic ElfParser to specifically handle ELF files
   produced by the XC16 compiler, extracting useful information about variables
   defined in the compiled program.

   Attributes:
       xc16_read_elf_path (str): Path to the XC16 `readelf` executable.

   .. py:method:: _parse_cu_attributes()

      Parse the attributes of a compilation unit from the ELF file.

      Returns:
          dict: A dictionary containing parsed attributes of the compilation unit.


   .. py:method:: _parse_cu_header()

      Parse the header of a compilation unit.

      Returns:
          dict: A dictionary containing parsed header information.


   .. py:method:: _parse_cu_members()

      Parse the members of a compilation unit.

      Returns:
          dict: A dictionary containing parsed members of the compilation unit.


   .. py:method:: _parse_cu_elements()

      Parse the elements of a compilation unit.

      Returns:
          dict: Dictionary containing the parsed elements.


   .. py:method:: _parse_cu()

      Parse a compilation unit.


   .. py:method:: _parse_tree(tree_string)

      Parse the entire tree string of the ELF file.

      Args:
          tree_string (str): The tree string to parse.


   .. py:method:: _load_elf_file()

      Load the ELF file according to the specific hardware architecture.

      This method should be implemented by subclasses to handle different ELF file formats.


   .. py:method:: _get_structure_member_offset(location: str)
      :staticmethod:

      Extract the offset of a structure member from its location string.

      Args:
          location (str): Location string of the member.

      Returns:
          int: Offset of the member.


   .. py:method:: _locate_cu_in_dwarf(structure_die)

      Locate the corresponding compilation unit in the DWARF information.

      Args:
          structure_die (dict): Dictionary representing a DWARF DIE for a structure.

      Returns:
          tuple: A tuple containing the compilation unit and its sibling


   .. py:method:: _get_member_from_nested_members(parent_address, nested_member, cu_structure)

      Extract information about a structure member from nested members.

      Args:
          parent_address (int): Address of the parent structure.
          nested_member (tuple): Nested structure member information.
          cu_structure (dict): DWARF DIE representing a structure.

      Returns:
          dict: Dictionary containing information about the structure member.


   .. py:method:: _get_structure_members(structure_die, parent_address=0)

      Recursively get all members of a structure.

      Args:
          structure_die (dict): DWARF DIE representing the structure.
          parent_address (int): Address of the parent structure.

      Returns:
          dict: Dictionary containing all structure members.


   .. py:method:: _get_address_check(location: str) -> int
      :staticmethod:

      Get address check value from a location string.

      Args:
          location (str): Location string.

      Returns:
          int: Address check value.


   .. py:method:: _get_address_location(location: str) -> int
      :staticmethod:

      Extract address location from a location string.

      Args:
          location (str): Location string.

      Returns:
          int: Address location.


   .. py:method:: _locate_tag_variable_end_die(die)

      Locate the end DIE of a variable tag.

      Args:
          die (dict): Dictionary representing a DWARF DIE.

      Returns:
          dict: Dictionary representing the end DIE.


   .. py:method:: _check_for_pointer_tag(die, end_die, address)

      Check if a DIE represents a pointer tag.

      Args:
          die (dict): Dictionary representing a DWARF DIE.
          end_die (dict): Dictionary representing the end DIE.
          address (int): Address of the DIE.

      Returns:
          bool: True if it's a pointer tag, False otherwise.


   .. py:method:: _check_for_structure_tag(die, end_die, address)

      Check if a DIE represents a structure tag.

      Args:
          die (dict): Dictionary representing a DWARF DIE.
          end_die (dict): Dictionary representing the end DIE.
          address (int): Address of the DIE.

      Returns:
          bool: True if it's a structure tag, False otherwise.


   .. py:method:: _get_end_die(start_die)

      Get the end die of a given die.

      Args:
          start_die (dict): The starting die.

      Returns:
          dict: The end dies.


   .. py:method:: _get_dwarf_die_by_offset(offset)

      Get a DWARF die by offset.

      Args:
          offset: The offset of the die.

      Returns:
          dict: The DWARF dies.


   .. py:method:: _map_variables() -> dict[str, pyx2cscope.parser.Elf_Parser.VariableInfo]

      Abstract method to map variables from the parsed DWARF information.

      Subclasses should implement this method to extract variable information specific to their ELF format.

      Returns:
          Dict[str, VariableInfo]: A dictionary of variable names to VariableInfo objects.



.. py:data:: elf_file
   :value: 'C:\\Users\\M71906\\MPLABXProjects\\MotorControl\\dsPIC33-LVMC-MB-FOC-Sensorless.X\\dist\\default\\product...'

   


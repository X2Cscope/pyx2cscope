:py:mod:`pyx2cscope.parser.generic_parser`
==========================================

.. py:module:: pyx2cscope.parser.generic_parser

.. autoapi-nested-parse::

   This module provides functionalities for parsing ELF files compatible with 32-bit architectures.

   It focuses on extracting structure members and variable information from DWARF debugging information.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyx2cscope.parser.generic_parser.GenericParser




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyx2cscope.parser.generic_parser.elf_file


.. py:class:: GenericParser(elf_path)


   Bases: :py:obj:`pyx2cscope.parser.elf_parser.ElfParser`

   Class for parsing ELF files compatible with 32-bit architectures.

   .. py:method:: _load_elf_file()

      Load the ELF file according to the specific hardware architecture.

      This method should be implemented by subclasses to handle different ELF file formats.


   .. py:method:: _close_elf_file()

      Closes the ELF file stream.


   .. py:method:: _get_die_variable(die_struct)

      Process the die_struct to obtain the die containing the variable and its info.

      This method populates class members:
      - self.die_variable
      - self.var_name
      - self.address


   .. py:method:: _process_die(die)

      Process a DIE structure containing the variable and its.


   .. py:method:: _get_base_type_die(current_die)

      Find the base type die regarding the current selected die, i.e. array_type.


   .. py:method:: _get_end_die(current_die)

      Find the end DIE of a type iteratively.


   .. py:method:: _extract_address_from_expression(expr_value, structs)

      Extracts an address from DWARF expression.

      Args:
          expr_value: The raw DWARF expression bytes.
          structs: The DWARF structs used for parsing expressions.

      Returns:
          int or None: The extracted address, or None if it couldn't be determined.


   .. py:method:: _extract_address(die_variable)

      Extracts the address of the current variable or fetches it from the symbol table if not found.


   .. py:method:: _load_symbol_table()

      Loads symbol table entries into a dictionary for fast access.


   .. py:method:: _fetch_address_from_symtab(variable_name)

      Fetches the address of a variable from the preloaded symbol table.


   .. py:method:: _find_actual_declaration(die_variable)

      Find the actual declaration of an extern variable.


   .. py:method:: _get_member_offset(die) -> tuple[int | None, int, int]

      Extracts the offset for a structure member.

      Args:
          die: The DIE of the structure member.

      Returns:
          int, int, int: The offset value, the bit_size (union) and bit offset (union).


   .. py:method:: _process_array_type(end_die, member_name, offset)

      Process array type members recursively.

      The easiest implementation is the array of primitives, which contains only primitives,
      e.g.: char my_array[10]. In this case, function _process_end_die(...) will return the
      variable 'members' with only one element. Considering multidimensional arrays, arrays of
      structs, and arrays of unions, the variable 'members' will have multiple elements, that should
      be considered when calculating the size of the main array element. Afterward, each element need
      to be added as single indexed element in the array_members variable.


   .. py:method:: _process_end_die(members, child_die, parent_name, offset)

      Process the current die according to its tag.

      A variable can be a primitive or can have multiple children, e.g., a struct or and array of structs.
      After calling this method, members is populated with details of the variable and its children.


   .. py:method:: _process_enum_type(end_die, parent_name, offset)
      :staticmethod:

      Process an enum type variable and map its members.


   .. py:method:: _process_union_type(die, parent_name: str, offset=0)

      Recursively extracts union members from a DWARF DIE.


   .. py:method:: _process_structure_type(die, parent_name: str, offset=0)

      Recursively extracts structure members from a DWARF DIE, including arrays.


   .. py:method:: _get_array_length(type_die)
      :staticmethod:

      Gets the length of an array type.


   .. py:method:: _process_base_type(end_die, parent_name, offset)
      :staticmethod:

      Process a base type variable.


   .. py:method:: _get_dwarf_die_by_offset(offset)

      Retrieve a DWARF DIE given its offset.


   .. py:method:: _map_variables() -> dict[str, pyx2cscope.variable.variable.VariableInfo]

      Maps all variables in the ELF file.



.. py:data:: elf_file
   :value: '..\\..\\tests\\data\\qspin_foc_same54.elf'

   


:py:mod:`pyx2cscope.variable.variable`
======================================

.. py:module:: pyx2cscope.variable.variable

.. autoapi-nested-parse::

   This module contains the Variable class and its subclasses.

   The Variable class represents a variable in the MCU data memory. It provides methods for retrieving and setting the value of the variable, as well as handling arrays of variables.

   Subclasses of the Variable class define specific types of variables, such as integers or floating-point numbers, and implement the necessary methods for converting between the byte representation of the variable and its actual value.

   Classes:
       - Variable: Represents a variable in the MCU data memory.
       - VariableInt8: Represents an 8-bit signed integer variable.
       - VariableUint8: Represents an 8-bit unsigned integer variable.
       - VariableInt16: Represents a 16-bit signed integer variable.
       - VariableUint16: Represents a 16-bit unsigned integer variable.
       - VariableInt32: Represents a 32-bit signed integer variable.
       - VariableUint32: Represents a 32-bit unsigned integer variable.
       - VariableInt64: Represents a 64-bit signed integer variable.
       - VariableUint64: Represents a 64-bit unsigned integer variable.
       - VariableFloat: Represents a floating-point number variable.
       - VariableEnum: Represents an enum variable.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyx2cscope.variable.variable.VariableInfo
   pyx2cscope.variable.variable.Variable
   pyx2cscope.variable.variable.VariableInt8
   pyx2cscope.variable.variable.VariableUint8
   pyx2cscope.variable.variable.VariableInt16
   pyx2cscope.variable.variable.VariableUint16
   pyx2cscope.variable.variable.VariableInt32
   pyx2cscope.variable.variable.VariableUint32
   pyx2cscope.variable.variable.VariableUint64
   pyx2cscope.variable.variable.VariableInt64
   pyx2cscope.variable.variable.VariableFloat
   pyx2cscope.variable.variable.VariableEnum




.. py:class:: VariableInfo


   A raw representation about a variable.

   Attributes:
       name (str): The name of the variable.
       type (str): The data type of the variable.
       byte_size (int): The size of the variable in bytes.
       bit_size (int): bit_size of variable if size is less than a byte (e.g.: union type)
       bit_offset (int): bit_offset of variable if size is less than a byte (e.g.: union type)
       address (int): The memory address of the variable.
       array_size (int): The size of the array if the variable is an array, default is 0.
       valid_values (dict): enum type of valid values

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: type
      :type: str

      

   .. py:attribute:: byte_size
      :type: int

      

   .. py:attribute:: bit_size
      :type: int

      

   .. py:attribute:: bit_offset
      :type: int

      

   .. py:attribute:: address
      :type: int

      

   .. py:attribute:: array_size
      :type: int

      

   .. py:attribute:: valid_values
      :type: Dict[str, int]

      


.. py:class:: Variable(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Represents a variable in the MCU data memory.

   .. py:method:: __getitem__(item)

      Retrieve value regarding an indexed address from the variable's base address.

      Subclasses will handle the conversion to the real value.

      Args:
          item (int): The variable index (in case of an array). Default to zero.

      Raises:
          IndexError: If the index is outside the variable scope.

      Returns:
          the value of the variable's index position.


   .. py:method:: __setitem__(key, value)

      Set the value regarding an indexed address from the variable's base address.

      Args:
          key (int): the index of the variable.
          value (Number): The value to be stored in the MCU.


   .. py:method:: __len__()

      Get the number of elements on this variable.

      In case the variable is an array, we will get the array size.
      In case of a single object, we will get the value 0.

      Returns:
          int: The number of elements in the array or 0 for a single variable.


   .. py:method:: __repr__()

      String representation of the Variable.

      When printing the variable on a terminal or with str() operator, instead of printing the object and
      class attributes, the name of the variable will be printed.


   .. py:method:: _get_array_values()

      Retrieve all values of the array from the MCU memory.

      Returns:
          List[Number]: The list of values in the array.


   .. py:method:: get_value()

      Get the stored value from the MCU.

      Returns:
          Number: The stored value from the MCU.


   .. py:method:: _check_value_range(value: numbers.Number)

      Check if the given value is in range of min and max variable values.

      Args:
          value: the variable value

      Raises:
          ValueError: if value is outside min-max range.


   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]
      :abstractmethod:

      Return a tuple with allowed [min, max] values.

      Returns:
          tuple[Number, Number]: The minimum and maximum allowed values.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number
      :abstractmethod:

      Convert the byte array to the respective variable number value.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: the variable value as a number.


   .. py:method:: bytes_to_array(data: bytearray) -> List[numbers.Number]

      Convert a byte array to a list of numbers based on variable width.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          List[Number]: The list of numbers.


   .. py:method:: set_value(new_value: numbers.Number)
      :abstractmethod:

      Set the value to be stored in the MCU.

      Args:
          new_value (Number): The value to be stored in the MCU.


   .. py:method:: get_width() -> int
      :abstractmethod:

      Get the width of the variable.

      Returns:
          int: Width of the variable.


   .. py:method:: is_array()

      Check if the variable is an array in the MCU.

      Returns:
          bool: True if the variable is an array, False otherwise.


   .. py:method:: _get_value_raw(index=0) -> bytearray

      Ask LNet and get the raw "bytearray" value from the hardware.

      Subclasses will handle the conversion to the real value.

      Args:
          index (int): The variable index (in case of an array). Default to zero.

      Raises:
          ValueError: If the returned data length is not the expected length.

      Returns:
          bytearray: Raw data returned from LNet, must be reconstructed to the right value.


   .. py:method:: _set_value_raw(bytes_data: bytes, index: int = 0) -> None

      Set the value of a variable in the microcontroller's RAM using raw bytes.

      This method sends the raw byte data to the specified memory address in the microcontroller's RAM.
      It handles the low-level communication with the microcontroller using the LNet interface.

      Args:
          bytes_data (bytes): The raw byte data to be written to the variable's memory location.
          index (int): The variable index (in case of an array). Default to zero.

      Raises:
          Exception: If there is an error in writing the data to the microcontroller's RAM.


   .. py:method:: is_signed() -> bool
      :abstractmethod:

      Abstract method to determine if the variable's data type is signed.

      Implementations of this method should return True if the variable's data type
      is a signed type (like signed integers), otherwise False.

      Returns:
          bool: True if the variable is of a signed data type, False otherwise.


   .. py:method:: is_integer() -> bool
      :abstractmethod:

      Abstract method to determine if the variable's data type is an integer.

      Implementations of this method should return True if the variable's data type
      is an integer (signed or unsigned), otherwise False for non-integer data types.

      Returns:
          bool: True if the variable is of an integer data type, False otherwise.



.. py:class:: VariableInt8(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents an 8-bit signed integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 8-bit signed integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Override: INT8 is an integer type.


   .. py:method:: is_signed() -> bool

      Override: INT8 is a signed type.


   .. py:method:: get_width() -> int

      Get the width of the 8-bit signed integer.

      Returns:
          int: Width of the variable, which is 1.


   .. py:method:: set_value(value: int)

      Set the value of the 8-bit signed integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to an 8-bit signed integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 8-bit signed integer value.



.. py:class:: VariableUint8(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents an 8-bit unsigned integer variable.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 8-bit unsigned integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: False, because this variable is unsigned.


   .. py:method:: get_width() -> int

      Get the width of the 8-bit unsigned integer.

      Returns:
          int: Width of the variable, which is 1.


   .. py:method:: set_value(value: int)

      Override: Set the value of the variable in the MCU memory.

      Checks if the value is within the allowed range and converts it to bytes representation.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to an 8-bit unsigned integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 8-bit unsigned integer value.



.. py:class:: VariableInt16(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 16-bit signed integer variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 16-bit signed integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: True, because this variable is signed.


   .. py:method:: get_width() -> int

      Get the width of the 16-bit signed integer.

      Returns:
          int: Width of the variable, which is 2.


   .. py:method:: set_value(value: int)

      Set the value of the 16-bit signed integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 16-bit signed integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 16-bit signed integer value.



.. py:class:: VariableUint16(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 16-bit unsigned integer variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 16-bit unsigned integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: False, because this variable is unsigned.


   .. py:method:: get_width() -> int

      Get the width of the 16-bit unsigned integer.

      Returns:
          int: Width of the variable, which is 2.


   .. py:method:: set_value(value: int)

      Set the value of the 16-bit unsigned integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 16-bit unsigned integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 16-bit unsigned integer value.



.. py:class:: VariableInt32(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 32-bit signed integer variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 32-bit signed integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: True, because this variable is signed.


   .. py:method:: get_width() -> int

      Get the width of the 32-bit signed integer.

      Returns:
          int: Width of the variable, which is 4.


   .. py:method:: set_value(value: int)

      Set the value of the 32-bit signed integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 32-bit signed integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 32-bit signed integer value.



.. py:class:: VariableUint32(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 32-bit unsigned integer variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 32-bit unsigned integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: False, because this variable is unsigned.


   .. py:method:: get_width() -> int

      Get the width of the 32-bit unsigned integer.

      Returns:
          int: Width of the variable, which is 4.


   .. py:method:: set_value(value: int)

      Set the value of the 32-bit unsigned integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 32-bit unsigned integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 32-bit unsigned integer value.



.. py:class:: VariableUint64(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 64-bit unsigned integer variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 64-bit unsigned integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: False, because this variable is unsigned.


   .. py:method:: get_width() -> int

      Get the width of the 64-bit unsigned integer.

      Returns:
          int: Width of the variable, which is 8.


   .. py:method:: set_value(value: int)

      Set the value of the 64-bit unsigned integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 64-bit unsigned integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 64-bit unsigned integer value.



.. py:class:: VariableInt64(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 64-bit signed integer variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 64-bit signed integer.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: True, because this variable is an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: True, because this variable is signed.


   .. py:method:: get_width() -> int

      Get the width of the 64-bit signed integer.

      Returns:
          int: Width of the variable, which is 8.


   .. py:method:: set_value(value: int)

      Set the value of the 64-bit signed integer.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 64-bit signed integer.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 64-bit signed integer value.



.. py:class:: VariableFloat(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str = None)


   Bases: :py:obj:`Variable`

   Represents a 32-bit floating point variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 32-bit floating point.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: False, because this variable is a float.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: True, because this variable is signed.


   .. py:method:: get_width() -> int

      Get the width of the 32-bit floating point.

      Returns:
          int: Width of the variable, which is 4.


   .. py:method:: set_value(value: float)

      Set the value of the 32-bit floating point.

      Args:
          value (float): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to a 32-bit floating point.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The 32-bit floating point value.



.. py:class:: VariableEnum(l_net: mchplnet.lnet.LNet, address: int, array_size: int, name: str, enum_list: dict[str, int])


   Bases: :py:obj:`Variable`

   Represents enum variable in the MCU data memory.

   .. py:method:: _get_min_max_values() -> tuple[numbers.Number, numbers.Number]

      Get the minimum and maximum values for the 16-bit enum.

      Returns:
          tuple[Number, Number]: The minimum and maximum values.


   .. py:method:: is_integer() -> bool

      Check if the variable is an integer.

      Returns:
          bool: Enumeration is stricktly an integer.


   .. py:method:: is_signed() -> bool

      Check if the variable is signed.

      Returns:
          bool: Depending on the enum values.


   .. py:method:: get_width() -> int

      Get the width of the 16-bit enum.

      Returns:
          int: Width of the variable, which is 2.


   .. py:method:: set_value(value: int)

      Set the value of the 16-bit enum.

      Args:
          value (int): The value to set.


   .. py:method:: bytes_to_value(data: bytearray) -> numbers.Number

      Convert the byte array to enum.

      Args:
          data (bytearray): The byte array to convert.

      Returns:
          Number: The enum value.


   .. py:method:: get_enumerator_list() -> Dict[str, int]

      Get the valid values for the enum variable.

      Returns:
          Dict[str, int]: A dictionary of valid values for the enum variable.



